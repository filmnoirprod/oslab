 
/* crypto-chrdev.c
 *
 * Implementation of character devices
 * for virtio-crypto device 
 *
 * Vangelis Koukis <vkoukis@cslab.ece.ntua.gr>
 * Dimitris Siakavaras <jimsiak@cslab.ece.ntua.gr>
 * Stefanos Gerangelos <sgerag@cslab.ece.ntua.gr>
 *
 */
#include <linux/cdev.h>
#include <linux/poll.h>
#include <linux/sched.h>
#include <linux/module.h>
#include <linux/wait.h>
#include <linux/virtio.h>
#include <linux/virtio_config.h>

#include "crypto.h"
#include "crypto-chrdev.h"
#include "debug.h"

#include "cryptodev.h"

/*
 * Global data
 */
struct cdev crypto_chrdev_cdev;

/**
 * Given the minor number of the inode return the crypto device 
 * that owns that number.
 **/
static struct crypto_device *get_crypto_dev_by_minor(unsigned int minor)
{
	struct crypto_device *crdev;
	unsigned long flags;

	debug("Entering");

	spin_lock_irqsave(&crdrvdata.lock, flags);
	list_for_each_entry(crdev, &crdrvdata.devs, list) {
		if (crdev->minor == minor)
			goto out;
	}
	crdev = NULL;

out:
	spin_unlock_irqrestore(&crdrvdata.lock, flags);

	debug("Leaving");
	return crdev;
}

/*************************************
 * Implementation of file operations
 * for the Crypto character device
 *************************************/

static int crypto_chrdev_open(struct inode *inode, struct file *filp)
{
	int ret = 0;
	int err;
	unsigned int len=0;
	struct crypto_open_file *crof;
	struct crypto_device *crdev;
        struct scatterlist sg1,sg2,*sgs[2];
	unsigned int *syscall_type;
	int *host_fd;
	debug("Entering");

	syscall_type = kzalloc(sizeof(*syscall_type), GFP_KERNEL);
	*syscall_type = VIRTIO_CRYPTO_SYSCALL_OPEN;
	host_fd = kzalloc(sizeof(*host_fd), GFP_KERNEL);
	*host_fd = -1;

	ret = -ENODEV;
	if ((ret = nonseekable_open(inode, filp)) < 0)
		goto fail;

	/* Associate this open file with the relevant crypto device. */
	crdev = get_crypto_dev_by_minor(iminor(inode));
	if (!crdev) {
		debug("Could not find crypto device with %u minor", 
		      iminor(inode));
		ret = -ENODEV;
		goto fail;
	}

	crof = kzalloc(sizeof(*crof), GFP_KERNEL);
	if (!crof) {
		ret = -ENOMEM;
		goto fail;
	}
	crof->crdev = crdev;
	crof->host_fd = -1;
	filp->private_data = crof;

	/**
	 * We need two sg lists, one for syscall_type and one to get the 
	 * file descriptor from the host.
	 **/

        sg_init_one( &sg1 , syscall_type , sizeof(*syscall_type) );
        sgs[0] = &sg1;
        sg_init_one( &sg2 , host_fd , sizeof(*host_fd) );
        sgs[1] = &sg2;

	/**
	 * Wait for the host to process our data.
	 **/
        spin_lock_irq(&crdev->lock);

	virtqueue_add_sgs(crdev->vq, sgs, 1, 1, &sg1, GFP_ATOMIC);
	virtqueue_kick(crdev->vq);

	while (virtqueue_get_buf(crdev->vq, &len) == NULL)

	spin_unlock_irq(&crdev->lock);

	/* If host failed to open() return -ENODEV. */

	if(host_fd < 0){
		debug("Host failed to open() cryptodev!");
		ret = -ENODEV;
	}
        else {
                 crof->host_fd = * host_fd;
        }
		

fail:
	debug("Leaving");
	return ret;
}

static int crypto_chrdev_release(struct inode *inode, struct file *filp)
{
	int ret = 0;
	unsigned int len=0;
        struct scatterlist sg1,sg2,*sgs[2];
	struct crypto_open_file *crof = filp->private_data;
	struct crypto_device *crdev = crof->crdev;
	unsigned int *syscall_type;

	debug("Entering");

	syscall_type = kzalloc(sizeof(*syscall_type), GFP_KERNEL);
	*syscall_type = VIRTIO_CRYPTO_SYSCALL_CLOSE;

  	sg_init_one( &sg1 , syscall_type , sizeof(*syscall_type) );
        sgs[0] = &sg1;
        sg_init_one( &sg2 , &crof->host_fd , sizeof(crof->host_fd) );
        sgs[1] = &sg2;

	/**
	 * Wait for the host to process our data.
	 **/

        spin_lock_irq(&crdev->lock);

	virtqueue_add_sgs(crdev->vq, sgs, 2, 0, &sg1, GFP_ATOMIC);
	virtqueue_kick(crdev->vq);

	while (virtqueue_get_buf(crdev->vq, &len) == NULL)

	spin_unlock_irq(&crdev->lock);


	kfree(crof);
	debug("Leaving");
	return ret;

}

static long crypto_chrdev_ioctl(struct file *filp, unsigned int cmd, 
                                unsigned long arg)
{
	long ret = 0;
	int err,rem=0;
	struct crypto_open_file *crof = filp->private_data;
	struct crypto_device *crdev = crof->crdev;
	struct virtqueue *vq = crdev->vq;
	struct scatterlist syscall_type_sg, output_msg_sg, input_msg_sg, host_sg,ioctl_sg,sessid_sg,session_sg,key_sg,retval_sg,crypt_sg,iv_sg,src_sg,dst_sg, *sgs[8];
	unsigned int num_out, num_in, len;
#define MSG_LEN 100
	unsigned char *output_msg, *input_msg;
       	unsigned int *syscall_type,*cmd_ad;
        int* retval=NULL;
        u32* sessid=NULL;
        struct session_op* session=NULL;
        struct crypt_op* crypt=NULL;
        unsigned char* key=NULL ;
	unsigned char* iv=NULL;
	unsigned char* dst=NULL;
	unsigned char* src=NULL;
	unsigned char* dest=NULL;
	debug("Entering");

	/**
	 * Allocate all data that will be sent to the host.
	 **/
	output_msg = kzalloc(MSG_LEN, GFP_KERNEL);
	input_msg = kzalloc(MSG_LEN, GFP_KERNEL);
	syscall_type = kzalloc(sizeof(*syscall_type), GFP_KERNEL);
	*syscall_type = VIRTIO_CRYPTO_SYSCALL_IOCTL;
        cmd_ad = kzalloc(sizeof(*cmd_ad) , GFP_KERNEL );
        *cmd_ad = cmd;

	num_out = 0;
	num_in = 0;

	/**
	 *  These are common to all ioctl commands.
	 **/
	sg_init_one(&syscall_type_sg, syscall_type, sizeof(*syscall_type));
	sgs[num_out++] = &syscall_type_sg;
        sg_init_one(&host_sg, &crof->host_fd, sizeof(crof->host_fd));
	sgs[num_out++] = &host_sg;
	sg_init_one(&ioctl_sg, cmd_ad, sizeof(*cmd_ad));
	sgs[num_out++] = &ioctl_sg;
	/* ?? */

	/**
	 *  Add all the cmd specific sg lists.
	 **/
	switch (cmd) {
	case CIOCGSESSION:
		debug("CIOCGSESSION");
                session = kzalloc(sizeof(*session) , GFP_KERNEL);
                if(copy_from_user(session,(void __user*) arg , sizeof(*session)) != 0) {
                       printk("error while copying from user session in GSESSION\n");
                       return -EFAULT;
                } 
                key = kzalloc((session->keylen)*sizeof(char), GFP_KERNEL);
                if(copy_from_user(key,session->key, (session->keylen)*sizeof(char)) > 0) {
                       printk("error while copying from user key in GSESSION\n");
                       return -EFAULT;
                } 
                session->key=key;
                sg_init_one(&session_sg,session,sizeof(*session));
                sg_init_one(&key_sg,key,sizeof(session->key));
                sg_init_one(&retval_sg,retval,sizeof(*retval));
                sgs[num_out++]=&key_sg;
                sgs[num_out + num_in++]=&session_sg;
                sgs[num_out + num_in++]=&retval_sg;
                rem=1;
		break;

	case CIOCFSESSION:
		debug("CIOCFSESSION");
                sessid = kzalloc(sizeof(*sessid) , GFP_KERNEL);
                if(copy_from_user(sessid,(void __user*) arg , sizeof(*sessid)) > 0) {
                       printk("error while copying from user sessid in FSESSION\n");
                       return -EFAULT;
                } 
                sg_init_one(&sessid_sg,sessid,sizeof(*sessid));
                sg_init_one(&retval_sg,retval,sizeof(*retval));
                sgs[num_out++]=&sessid_sg;
                sgs[num_out + num_in++]=&retval_sg;
                rem=2;

		break;

	case CIOCCRYPT:
		debug("CIOCCRYPT");
                crypt = kzalloc(sizeof(*crypt), GFP_KERNEL);
                if(copy_from_user(crypt,(void __user*) arg , sizeof(*crypt)) > 0) {
                       printk("error while copying from user crypt in CCRYPT\n");
                       return -EFAULT;
                } 
                src = kzalloc(crypt->len *sizeof(char), GFP_KERNEL);
                if(copy_from_user(src,crypt->src , crypt->len *sizeof(char)) > 0) {
                       printk("error while copying from user src in CCRPYPT\n");
                       return -EFAULT;
                } 
                iv = kzalloc(16*sizeof(char),GFP_KERNEL);
                if(copy_from_user(iv,crypt->iv , 16*sizeof(char)) > 0) {
                       printk("error while copying from user crypt in CCRPYPT\n");
                       return -EFAULT;
                } 
                dest = crypt->dst;
                dst = kzalloc(crypt->len*sizeof(char), GFP_KERNEL);
                crypt->dst=dst;
                sg_init_one(&crypt_sg,crypt,sizeof(*crypt));
                sg_init_one(&src_sg,src,crypt->len *sizeof(char));
                sg_init_one(&iv_sg,iv,16*sizeof(char));
                sg_init_one(&dst_sg,dst,crypt->len *sizeof(char));
                sg_init_one(&retval_sg,retval,sizeof(*retval));
                sgs[num_out++]=&crypt_sg;
                sgs[num_out++]=&src_sg;
                sgs[num_out++]=&iv_sg;
                sgs[num_out+ num_in++]=&dst_sg;
                sgs[num_out+ num_in++]=&retval_sg;
                rem=3;
		break;

	default:
		debug("Unsupported ioctl command");

		break;
	}


	/**
	 * Wait for the host to process our data.
	 **/
	/* ?? */
	/* ?? Lock ?? */
        spin_lock_irq(&crdev->lock); 
	err = virtqueue_add_sgs(vq, sgs, num_out, num_in,
	                        &syscall_type_sg, GFP_ATOMIC);
	virtqueue_kick(vq);

	while (virtqueue_get_buf(vq, &len) == NULL)
		/* do nothing */;

        spin_unlock_irq(&crdev->lock);
        switch(rem){
        case 1:
                  if(copy_to_user((void __user *)arg , session , sizeof(*session))) return -EFAULT;
                  kfree(key);
                  kfree(session);
                  break;
        case 2:
                  kfree(sessid); 
                  break;
        case 3:
                  if(copy_to_user((void __user *)dest , dst , crypt->len *sizeof(char))) return -EFAULT;
                  kfree(crypt);
                  kfree(src);
                  kfree(iv);
                  kfree(dst);
                  break;
        default:
                  break;
        }
	kfree(output_msg);
	kfree(input_msg);
	kfree(syscall_type);

	debug("Leaving");

	return ret;
}

static ssize_t crypto_chrdev_read(struct file *filp, char __user *usrbuf, 
                                  size_t cnt, loff_t *f_pos)
{
	debug("Entering");
	debug("Leaving");
	return -EINVAL;
}

static struct file_operations crypto_chrdev_fops = 
{
	.owner          = THIS_MODULE,
	.open           = crypto_chrdev_open,
	.release        = crypto_chrdev_release,
	.read           = crypto_chrdev_read,
	.unlocked_ioctl = crypto_chrdev_ioctl,
};

int crypto_chrdev_init(void)
{
	int ret;
	dev_t dev_no;
	unsigned int crypto_minor_cnt = CRYPTO_NR_DEVICES;
	
	debug("Initializing character device...");
	cdev_init(&crypto_chrdev_cdev, &crypto_chrdev_fops);
	crypto_chrdev_cdev.owner = THIS_MODULE;
	
	dev_no = MKDEV(CRYPTO_CHRDEV_MAJOR, 0);
	ret = register_chrdev_region(dev_no, crypto_minor_cnt, "crypto_devs");
	if (ret < 0) {
		debug("failed to register region, ret = %d", ret);
		goto out;
	}
	ret = cdev_add(&crypto_chrdev_cdev, dev_no, crypto_minor_cnt);
	if (ret < 0) {
		debug("failed to add character device");
		goto out_with_chrdev_region;
	}

	debug("Completed successfully");
	return 0;

out_with_chrdev_region:
	unregister_chrdev_region(dev_no, crypto_minor_cnt);
out:
	return ret;
}

void crypto_chrdev_destroy(void)
{
	dev_t dev_no;
	unsigned int crypto_minor_cnt = CRYPTO_NR_DEVICES;

	debug("entering");
	dev_no = MKDEV(CRYPTO_CHRDEV_MAJOR, 0);
	cdev_del(&crypto_chrdev_cdev);
	unregister_chrdev_region(dev_no, crypto_minor_cnt);
	debug("leaving");
}
